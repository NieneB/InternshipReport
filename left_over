# Method

Once the general goal was established; making a web-based geo-visualization, the case study in the field of cultural heritage had to be defined. This, because the internship is conducted for the project Heritage&Location at the Waag Society. In the project several heritage institutions take part, and so came into contact with possible data providers. After explaining the general goal of this study to them, the data needed for this report was provided by  *Rijksdienst voor Cultureel Erfgoed*.
With the data, the subject of the research took more form.

The report will be build up in 3 parts; first geo-visualization and web-application techniques will be explored through literature study. With the found techniques, the web-application will be build, for which certain design objectives will be defined. In the end the application will be tested according to the set objectives and found literature.





#### AHN

The AHN2 tiles covering the research area were downloaded from nationaalgeoregister.nl to show the relation of the field-names with the environment. The AHN has proved useful for historical research. Small differences in the landscape can be seen in the AHN2 and already historians and archeologist use it to discover old settlements that cant be discovered with the naked eye. (Actueel Hoogtebestand Nederland, n.d.)

The raster data has a resolution of 5 meters and a precision of systematic and stochastic error of max 5 cm the projection is RD new ( EPSG28992). (Actueel Hoogtebestand Nederland, n.d.)

The maximum and minimum values of the total area are 29.5 and -1.9 meters respectively.

<figure class="text-wrap-left">
<p class="fig">  AHN2 from the research area </p>
<img src="img/ahn.jpg">
</figure>

See appendix for table with all the tiles used.

#### Kadaster parcels 1830

Data from the cadastre were also supplied by the RCE, showing the plots and parcels as they were in 1830. And can be used to refer the field-names to. The dataset is in projection RDnew(EPSG28992).

#### Water bodies

The water bodies are downloaded from the open data PDOK.nl. The Top10NLactueel contains all topology of the Netherlands on a scale of 1:25.000.
From this dataset only the water polygons are used and clipped to the research area. So the names of the water bodies can be included into the application. (“TOP10NL | Publieke Dienstverlening Op de Kaart Loket,” n.d.)
EPSG28992

<p class="table"> Map sheets Top10NL downloaded </p>
<table>
  <tr> <td>Top10NL_17O</td> <td>Top10NL_1rW</td> <td>Top10NL_1rO</td> <td>Top10NL_1rW</td></tr>
</table>



#### AHN

<figure class="text-wrap-right">
  <figcaption>  Flowchart AHN2 raster processing  </figcaption>
  <img src="img/ahnpreprocessing.jpg">
</figure> 

The AHN is measured with laser altimetry or LIDAR. Laser beams shot from an airplane and localized with GPS. It is measured over several time periods and merged in the end to get a detailed measurement of the height. The eventual end product delivered is corrected to ground level.(maaiveld) So vegetation, buildings and other object do not appear. (Actueel Hoogtebestand Nederland, n.d.) These filtered areas are given no-data values.

For use in the application, the transect line looks best when not containing any gaps. Therefore, the no-data values are filled by the fill no-data tool of Qgis. This takes an average of around 100 pixels to calculate the average height of the missing pixels.



#### Cadastre parcels
No preprocessing needed other then explained in <a class="xref" href="pre-processing-the-data"></a> preprocessing field-names.

####Water bodies

Only processing was clipped to the research area. No other preprocessing needed other then was used for the AHN.

### Back-end processes

First both client side and server side are build on one computer as a single seat set-up, in order to develop and test the processes. Once the desired result is achieved, the possibility to move it to a server will be regarded.

<figure id="proces">
<figcaption> Back-end processes </figcaption> 
<img src="img/webpage_model.jpg">
</figure>

Figure <a class="xref" href="#proces"></a> shows the overall setup of the system. On the web page a line can be drawn by LeafletDraw on the Leaflet map. The coordinates of this line are edited to a line string format and parsed into a SQL query. This query is explained in paragraph <a class="xref" href="#api-sql-queries"> </a>. This query is asked to the API which requests the data from the PostGIS database. The response is a geoJSON array containing the heights on every 10 meters of the line. This data is parsed back to the script of the website and used to draw the transect line and all the other characteristics needed.
The next paragraphs explain the database, the API, the SQL query and the website.


#### Setting up the database

<figure class="text-wrap-left">
  <figcaption> Loading data into the database</figcaption>
  <img src="img/loading_Data.jpg">
</figure>

The open source database PostgreSQL was installed with a PostGIS extension to create the needed database. It is currently the most popular free and open source spatial database (Steiniger and Hunter 2013). The PostGIS extension enables geographic objects like shape files and rasters.

Everything was loaded in the Dutch projected coordinate system RD new (EPSG:28992)  


<p class="code"> Loading data in the database </p>
    Shp2pgsql
    ➜  ~ shp2pgsql -s 28992 /<path name>/veldnamen.shp veldnamen | psql -U user -d veldnamen

    Raster2pgsql
    ➜  ~ raster2pgsql -s 28992 -I -C /<path name>/ahn2*.tif public.ahn2 | psql -d veldnamen

####Setting up web-server or web API
A API or application programming interface, is needed to connect the web-application with the data in the PostGis database.
For this purpose Brianc node-postgres is used. Done with Node-Postgres for PostgreSQL client for node.js with pure JavaScript bindings.
The API itself is a chunk of software code written

It supports parameterizes queries for PostgreSQL

So the functions are made to get from coordinates to a SQL query asking the height data from the AHN raster.
https://github.com/brianc/node-postgres
https://nodejs.org/about/

<p class="code"> Request &amp; Response for transect line </p>

    app.get('/transect', function (req, res) {
      query(queries.transect, ['LINESTRING (' + req.query.linestring + ')'] , function(err, result) {
        if (err) {
          res.status(500).send(err);
        } else {
          res.send(result.rows.map(function(row) {
            row.geometry = JSON.parse(row.geometry);
            return row;
          }));
        }
      })
    });

#### API SQL queries

After a line is drawn on the Leaflet map with Leaflet Draw, the coordinates  of the line are inserted into the request ($1) as a LINESTRING format. The line is in WGS84 (EPSG4326) and needs to be converted to RDNew(EPSG28992) in order to extract the location with the other data at the right location.

<p class="code"> The line</p>

        WITH line AS
      -- Create line geometry
      (SELECT ST_Transform(ST_GeomFromText($1 , 4326), 28992) AS geom),

The line is then cut into parts of 10 meter and points are generated with its percentage location along the line.

<p class="code"> Point and percentage at every 10 m along the line</p>

    linemesure AS
      (SELECT ST_AddMeasure(line.geom, 0, ST_Length(line.geom)) as linem,
      generate_series(0, ST_Length(line.geom)::int, 10) as i
      FROM line),

    points2d AS
      (SELECT ST_GeometryN(ST_LocateAlong(linem, i), 1) AS geom, (i*100/ST_Length(linem)) as percentage
      FROM linemesure),

This array of points is intersected with the  AHN table to ext rat the height value for every point.

<p class="code"> Get height per point</p>

    AHN AS
    -- Get DEM elevation for each
      (SELECT p.geom AS geom, ST_Value(ahn.rast, 1, p.geom) AS heights, percentage
      FROM ahn, points2d p
      WHERE ST_Intersects(ahn.rast, p.geom)),

Also the points are intersected with the field names table to see if a points falls into a field, and wich name and category code it belongs to.

<p class="code">  Get field name for intersecting points</p>

    fields AS
        (SELECT naam AS naam, code_1_ AS category1, code_2 AS category2, ST_Intersection(p.geom, veldnamen2.geom) AS geoms
                FROM veldnamen2, points2d p
                WHERE ST_Intersects(veldnamen2.geom, p.geom)),

Then the points are intersected with the water topology table to see if a points falls into a water body, and which name and category code it belongs to.

<p class="code">  Get field name for intersecting points</p>

    --Get Water inersects
    waters As
    (SELECT naamnl AS waternaam, typewater AS typewater, identifica AS waterId, ST_Intersection(p.geom, water.geom) AS geomz
    FROM water, points2d p
    WHERE ST_Intersects(water.geom, p.geom)),

In the end all point that fall into a field or water body are joined to the total amount of points to contain the whole range of points.

<p class="code">  Join all outcomes</p>

    points AS
    (SELECT *  FROM AHN LEFT OUTER JOIN fields ON (AHN.geom = fields.geoms)),
    points1 AS
    (SELECT * FROM points LEFT OUTER JOIN waters ON (points.geom = waters.geomz))

This is all send back as one complete GeoJSON response.

<p class="code">  final GeoJSON response</p>

    -- Make points:
    SELECT ST_AsGeoJSON(ST_MakePoint(ST_X(ST_Transform(ST_SetSRID(geom, 28992),4326)), ST_Y(ST_Transform(ST_SetSRID(geom, 28992),4326)), heights))
    AS geometry, naam, heights, percentage , category1, category2, waternaam, typewater, waterID
    FROM points1

Eventually the response of the request will be a GeoJSON. An example of the GeoJSON array is shown in <a class="xref" href="#code-geojson"></a>.

<p id="code-geojson" class="code">Example GeoJSON response</p>

    [
      {
        "geometry": {
          "type": "Point",
          "coordinates": [
            6.6089395293246,
            53.0818691708253,
            8.05700016021729
          ]
        },
        "naam": "Zuurpol (de)",
        "heights": 8.05700016021729,
        "percentage": 0.826035566357403,
        "category1": "A1",
        "category2": null,
        "waternaam": null,
        "typewater": null,
        "waterid": null
      },
      {…},
      {…},
      {
        "geometry": {
          "type": "Point",
          "coordinates": [
            6.62981923722014,
            53.0856490864126,
            4.8439998626709
          ]
        },
        "naam": "Gryze Steen",
        "heights": 4.8439998626709,
        "percentage": 55.5813292359005,
        "category1": null,
        "category2": null,
        "waternaam": null,
        "typewater": "meer, plas, ven, vijver",
        "waterid": "NL.TOP10NL.128375900"
      },
      {…}
    ]


### Web design

Will be an inductive process. Mostly based on the researchers’ preferences. The language in the product will be Dutch, for the data covers a part of the Netherlands and the target group is dutch.
Internet mapping applications, is software that enables a developer to deliver and view geo-data and maps in a standard internet protocols and run in in a normal browser.

#### Licenses

Only use of free and open source software is used.

#### Map5

#### Technology

HTML, CSS to build the webpage and the interactivity with JavaScript .

Packages needed for building the geo-application will be leaflet and d3.js. And possible leaflet plugins like, Leaflet Draw and Leaflet MiniMap.
Leaflet is a JavaScript library for the creation of interactive maps by the founders of OpenStreetMap. Interesting for developers
is probably the focus on desktop and mobile web browsers, and its use of HTML5. (Steiniger and Hunter 2013)


Technological advancements, such as browsers that support scripting languages natively, and standards, such as Cascading Style Sheets (CSS), Asynchronous JavaScript and HTML 5.

#####Leaflet

<p class="code">  Leaflet map initializing </p>

    var basemaps ={
      "_1830": L.tileLayer('http://s.map5.nl/map/gast/tiles/tmk_1850/EPSG900913/{z}/{x}/{y}.png' ),
      "_2015": L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'),
      "Hoogte": L.tileLayer('http://s.map5.nl/map/gast/tiles/relief_struct/EPSG900913/{z}/{x}/{y}.jpeg')
    }

    var map = new L.map('map', {
      maxZoom: 15,
      minZoom: 12,
      layers: basemaps._1830
    });

    map.setView([53.079529, 6.614894], 14);
    map.setMaxBounds([
      [52.861743, 6.458972],
      [53.202277, 6.958035]
    ]);


#####D3, data driven documents.

<p class="code">  D3 request coordinates and drawing transect path  </p>

    d3.json('transect?linestring=' + coordinates, function(json) {
      var line = d3.select("#line")
      line.selectAll(".transect")
        .data(linestring)
        .enter()
        .append("path")
        .attr("class", "transect")
        .attr("d", lineFunction(json))
        .attr("stroke", "#2B2118")
        .attr("stroke-width", 3)
        .attr("fill", "none");
    });



